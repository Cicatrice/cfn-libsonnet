(import '../../../extensions/attributes.libsonnet') + {
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='Workspace', url='', help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-workspaces-workspace.html'),
  new(errorOnEmptyProp=true): { Type: 'AWS::WorkSpaces::Workspace', Properties: { DirectoryId: if errorOnEmptyProp then (error 'You need to define DirectoryId properties for AWS::WorkSpaces::Workspace resource') else null, UserName: if errorOnEmptyProp then (error 'You need to define UserName properties for AWS::WorkSpaces::Workspace resource') else null, BundleId: if errorOnEmptyProp then (error 'You need to define BundleId properties for AWS::WorkSpaces::Workspace resource') else null } },
  '#new':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-workspaces-workspace.html', args=[d.arg(name='errorOnEmptyProp', type=d.T.bool)]),
  '#withBundleId':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-workspaces-workspace.html#cfn-workspaces-workspace-bundleid', args=[d.arg(name='bundleId', type=d.T.string)]),
  withBundleId(bundleId): { Properties+: { BundleId: bundleId } },
  '#withDirectoryId':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-workspaces-workspace.html#cfn-workspaces-workspace-directoryid', args=[d.arg(name='directoryId', type=d.T.string)]),
  withDirectoryId(directoryId): { Properties+: { DirectoryId: directoryId } },
  '#withRootVolumeEncryptionEnabled':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-workspaces-workspace.html#cfn-workspaces-workspace-rootvolumeencryptionenabled', args=[d.arg(name='rootVolumeEncryptionEnabled', type=d.T.bool)]),
  withRootVolumeEncryptionEnabled(rootVolumeEncryptionEnabled): { Properties+: { RootVolumeEncryptionEnabled: rootVolumeEncryptionEnabled } },
  '#withTags':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-workspaces-workspace.html#cfn-workspaces-workspace-tags', args=[d.arg(name='tags', type=d.T.array)]),
  withTags(tags): { Properties+: { Tags: tags } },
  '#withTagsMixin':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-workspaces-workspace.html#cfn-workspaces-workspace-tags', args=[d.arg(name='tags', type=d.T.array)]),
  withTagsMixin(tags): { Properties+: { Tags+: tags } },
  '#withUserName':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-workspaces-workspace.html#cfn-workspaces-workspace-username', args=[d.arg(name='userName', type=d.T.string)]),
  withUserName(userName): { Properties+: { UserName: userName } },
  '#withUserVolumeEncryptionEnabled':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-workspaces-workspace.html#cfn-workspaces-workspace-uservolumeencryptionenabled', args=[d.arg(name='userVolumeEncryptionEnabled', type=d.T.bool)]),
  withUserVolumeEncryptionEnabled(userVolumeEncryptionEnabled): { Properties+: { UserVolumeEncryptionEnabled: userVolumeEncryptionEnabled } },
  '#withVolumeEncryptionKey':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-workspaces-workspace.html#cfn-workspaces-workspace-volumeencryptionkey', args=[d.arg(name='volumeEncryptionKey', type=d.T.string)]),
  withVolumeEncryptionKey(volumeEncryptionKey): { Properties+: { VolumeEncryptionKey: volumeEncryptionKey } },
  '#withWorkspaceProperties':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-workspaces-workspace.html#cfn-workspaces-workspace-workspaceproperties', args=[d.arg(name='workspaceProperties', type=d.T.object)]),
  withWorkspaceProperties(workspaceProperties): { Properties+: { WorkspaceProperties: workspaceProperties } },
  '#withWorkspacePropertiesMixin':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-workspaces-workspace.html#cfn-workspaces-workspace-workspaceproperties', args=[d.arg(name='workspaceProperties', type=d.T.object)]),
  withWorkspacePropertiesMixin(workspaceProperties): { Properties+: { WorkspaceProperties+: workspaceProperties } },
}
