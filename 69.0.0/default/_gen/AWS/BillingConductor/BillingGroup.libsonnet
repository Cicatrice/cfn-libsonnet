(import '../../../extensions/attributes.libsonnet') + {
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='BillingGroup', url='', help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-billingconductor-billinggroup.html'),
  new(errorOnEmptyProp=true): { Type: 'AWS::BillingConductor::BillingGroup', Properties: { Name: if errorOnEmptyProp then (error 'You need to define Name properties for AWS::BillingConductor::BillingGroup resource') else null, PrimaryAccountId: if errorOnEmptyProp then (error 'You need to define PrimaryAccountId properties for AWS::BillingConductor::BillingGroup resource') else null, AccountGrouping: if errorOnEmptyProp then (error 'You need to define AccountGrouping properties for AWS::BillingConductor::BillingGroup resource') else null, ComputationPreference: if errorOnEmptyProp then (error 'You need to define ComputationPreference properties for AWS::BillingConductor::BillingGroup resource') else null } },
  '#new':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-billingconductor-billinggroup.html', args=[d.arg(name='errorOnEmptyProp', type=d.T.bool)]),
  '#withAccountGrouping':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-billingconductor-billinggroup.html#cfn-billingconductor-billinggroup-accountgrouping', args=[d.arg(name='accountGrouping', type=d.T.object)]),
  withAccountGrouping(accountGrouping): { Properties+: { AccountGrouping: accountGrouping } },
  '#withAccountGroupingMixin':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-billingconductor-billinggroup.html#cfn-billingconductor-billinggroup-accountgrouping', args=[d.arg(name='accountGrouping', type=d.T.object)]),
  withAccountGroupingMixin(accountGrouping): { Properties+: { AccountGrouping+: accountGrouping } },
  '#withComputationPreference':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-billingconductor-billinggroup.html#cfn-billingconductor-billinggroup-computationpreference', args=[d.arg(name='computationPreference', type=d.T.object)]),
  withComputationPreference(computationPreference): { Properties+: { ComputationPreference: computationPreference } },
  '#withComputationPreferenceMixin':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-billingconductor-billinggroup.html#cfn-billingconductor-billinggroup-computationpreference', args=[d.arg(name='computationPreference', type=d.T.object)]),
  withComputationPreferenceMixin(computationPreference): { Properties+: { ComputationPreference+: computationPreference } },
  '#withDescription':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-billingconductor-billinggroup.html#cfn-billingconductor-billinggroup-description', args=[d.arg(name='description', type=d.T.string)]),
  withDescription(description): { Properties+: { Description: description } },
  '#withName':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-billingconductor-billinggroup.html#cfn-billingconductor-billinggroup-name', args=[d.arg(name='name', type=d.T.string)]),
  withName(name): { Properties+: { Name: name } },
  '#withPrimaryAccountId':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-billingconductor-billinggroup.html#cfn-billingconductor-billinggroup-primaryaccountid', args=[d.arg(name='primaryAccountId', type=d.T.string)]),
  withPrimaryAccountId(primaryAccountId): { Properties+: { PrimaryAccountId: primaryAccountId } },
  '#withTags':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-billingconductor-billinggroup.html#cfn-billingconductor-billinggroup-tags', args=[d.arg(name='tags', type=d.T.array)]),
  withTags(tags): { Properties+: { Tags: tags } },
  '#withTagsMixin':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-billingconductor-billinggroup.html#cfn-billingconductor-billinggroup-tags', args=[d.arg(name='tags', type=d.T.array)]),
  withTagsMixin(tags): { Properties+: { Tags+: tags } },
}
