(import '../../../extensions/attributes.libsonnet') + {
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='Container', url='', help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediastore-container.html'),
  new(errorOnEmptyProp=true): { Type: 'AWS::MediaStore::Container', Properties: { ContainerName: if errorOnEmptyProp then (error 'You need to define ContainerName properties for AWS::MediaStore::Container resource') else null } },
  '#new':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediastore-container.html', args=[d.arg(name='errorOnEmptyProp', type=d.T.bool)]),
  '#withAccessLoggingEnabled':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediastore-container.html#cfn-mediastore-container-accessloggingenabled', args=[d.arg(name='accessLoggingEnabled', type=d.T.bool)]),
  withAccessLoggingEnabled(accessLoggingEnabled): { Properties+: { AccessLoggingEnabled: accessLoggingEnabled } },
  '#withContainerName':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediastore-container.html#cfn-mediastore-container-containername', args=[d.arg(name='containerName', type=d.T.string)]),
  withContainerName(containerName): { Properties+: { ContainerName: containerName } },
  '#withCorsPolicy':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediastore-container.html#cfn-mediastore-container-corspolicy', args=[d.arg(name='corsPolicy', type=d.T.array)]),
  withCorsPolicy(corsPolicy): { Properties+: { CorsPolicy: corsPolicy } },
  '#withCorsPolicyMixin':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediastore-container.html#cfn-mediastore-container-corspolicy', args=[d.arg(name='corsPolicy', type=d.T.array)]),
  withCorsPolicyMixin(corsPolicy): { Properties+: { CorsPolicy+: corsPolicy } },
  '#withLifecyclePolicy':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediastore-container.html#cfn-mediastore-container-lifecyclepolicy', args=[d.arg(name='lifecyclePolicy', type=d.T.string)]),
  withLifecyclePolicy(lifecyclePolicy): { Properties+: { LifecyclePolicy: lifecyclePolicy } },
  '#withMetricPolicy':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediastore-container.html#cfn-mediastore-container-metricpolicy', args=[d.arg(name='metricPolicy', type=d.T.object)]),
  withMetricPolicy(metricPolicy): { Properties+: { MetricPolicy: metricPolicy } },
  '#withMetricPolicyMixin':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediastore-container.html#cfn-mediastore-container-metricpolicy', args=[d.arg(name='metricPolicy', type=d.T.object)]),
  withMetricPolicyMixin(metricPolicy): { Properties+: { MetricPolicy+: metricPolicy } },
  '#withPolicy':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediastore-container.html#cfn-mediastore-container-policy', args=[d.arg(name='policy', type=d.T.string)]),
  withPolicy(policy): { Properties+: { Policy: policy } },
  '#withTags':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediastore-container.html#cfn-mediastore-container-tags', args=[d.arg(name='tags', type=d.T.array)]),
  withTags(tags): { Properties+: { Tags: tags } },
  '#withTagsMixin':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediastore-container.html#cfn-mediastore-container-tags', args=[d.arg(name='tags', type=d.T.array)]),
  withTagsMixin(tags): { Properties+: { Tags+: tags } },
}
