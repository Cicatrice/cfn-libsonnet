(import '../../../extensions/attributes.libsonnet') + {
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='EndpointConfig', url='', help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpointconfig.html'),
  new(errorOnEmptyProp=true): { Type: 'AWS::SageMaker::EndpointConfig', Properties: { ProductionVariants: if errorOnEmptyProp then (error 'You need to define ProductionVariants properties for AWS::SageMaker::EndpointConfig resource') else null } },
  '#new':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpointconfig.html', args=[d.arg(name='errorOnEmptyProp', type=d.T.bool)]),
  '#withAsyncInferenceConfig':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpointconfig.html#cfn-sagemaker-endpointconfig-asyncinferenceconfig', args=[d.arg(name='asyncInferenceConfig', type=d.T.object)]),
  withAsyncInferenceConfig(asyncInferenceConfig): { Properties+: { AsyncInferenceConfig: asyncInferenceConfig } },
  '#withAsyncInferenceConfigMixin':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpointconfig.html#cfn-sagemaker-endpointconfig-asyncinferenceconfig', args=[d.arg(name='asyncInferenceConfig', type=d.T.object)]),
  withAsyncInferenceConfigMixin(asyncInferenceConfig): { Properties+: { AsyncInferenceConfig+: asyncInferenceConfig } },
  '#withDataCaptureConfig':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpointconfig.html#cfn-sagemaker-endpointconfig-datacaptureconfig', args=[d.arg(name='dataCaptureConfig', type=d.T.object)]),
  withDataCaptureConfig(dataCaptureConfig): { Properties+: { DataCaptureConfig: dataCaptureConfig } },
  '#withDataCaptureConfigMixin':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpointconfig.html#cfn-sagemaker-endpointconfig-datacaptureconfig', args=[d.arg(name='dataCaptureConfig', type=d.T.object)]),
  withDataCaptureConfigMixin(dataCaptureConfig): { Properties+: { DataCaptureConfig+: dataCaptureConfig } },
  '#withEndpointConfigName':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpointconfig.html#cfn-sagemaker-endpointconfig-endpointconfigname', args=[d.arg(name='endpointConfigName', type=d.T.string)]),
  withEndpointConfigName(endpointConfigName): { Properties+: { EndpointConfigName: endpointConfigName } },
  '#withKmsKeyId':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpointconfig.html#cfn-sagemaker-endpointconfig-kmskeyid', args=[d.arg(name='kmsKeyId', type=d.T.string)]),
  withKmsKeyId(kmsKeyId): { Properties+: { KmsKeyId: kmsKeyId } },
  '#withProductionVariants':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpointconfig.html#cfn-sagemaker-endpointconfig-productionvariants', args=[d.arg(name='productionVariants', type=d.T.array)]),
  withProductionVariants(productionVariants): { Properties+: { ProductionVariants: productionVariants } },
  '#withProductionVariantsMixin':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpointconfig.html#cfn-sagemaker-endpointconfig-productionvariants', args=[d.arg(name='productionVariants', type=d.T.array)]),
  withProductionVariantsMixin(productionVariants): { Properties+: { ProductionVariants+: productionVariants } },
  '#withTags':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpointconfig.html#cfn-sagemaker-endpointconfig-tags', args=[d.arg(name='tags', type=d.T.array)]),
  withTags(tags): { Properties+: { Tags: tags } },
  '#withTagsMixin':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpointconfig.html#cfn-sagemaker-endpointconfig-tags', args=[d.arg(name='tags', type=d.T.array)]),
  withTagsMixin(tags): { Properties+: { Tags+: tags } },
}
