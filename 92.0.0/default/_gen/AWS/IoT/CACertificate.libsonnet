(import '../../../extensions/attributes.libsonnet') + {
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='CACertificate', url='', help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot-cacertificate.html'),
  new(errorOnEmptyProp=true): { Type: 'AWS::IoT::CACertificate', Properties: { Status: if errorOnEmptyProp then (error 'You need to define Status properties for AWS::IoT::CACertificate resource') else null, CACertificatePem: if errorOnEmptyProp then (error 'You need to define CACertificatePem properties for AWS::IoT::CACertificate resource') else null } },
  '#new':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot-cacertificate.html', args=[d.arg(name='errorOnEmptyProp', type=d.T.bool)]),
  '#withAutoRegistrationStatus':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot-cacertificate.html#cfn-iot-cacertificate-autoregistrationstatus', args=[d.arg(name='autoRegistrationStatus', type=d.T.string)]),
  withAutoRegistrationStatus(autoRegistrationStatus): { Properties+: { AutoRegistrationStatus: autoRegistrationStatus } },
  '#withCACertificatePem':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot-cacertificate.html#cfn-iot-cacertificate-cacertificatepem', args=[d.arg(name='cacertificatePem', type=d.T.string)]),
  withCACertificatePem(cacertificatePem): { Properties+: { CACertificatePem: cacertificatePem } },
  '#withCertificateMode':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot-cacertificate.html#cfn-iot-cacertificate-certificatemode', args=[d.arg(name='certificateMode', type=d.T.string)]),
  withCertificateMode(certificateMode): { Properties+: { CertificateMode: certificateMode } },
  '#withRegistrationConfig':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot-cacertificate.html#cfn-iot-cacertificate-registrationconfig', args=[d.arg(name='registrationConfig', type=d.T.object)]),
  withRegistrationConfig(registrationConfig): { Properties+: { RegistrationConfig: registrationConfig } },
  '#withRegistrationConfigMixin':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot-cacertificate.html#cfn-iot-cacertificate-registrationconfig', args=[d.arg(name='registrationConfig', type=d.T.object)]),
  withRegistrationConfigMixin(registrationConfig): { Properties+: { RegistrationConfig+: registrationConfig } },
  '#withRemoveAutoRegistration':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot-cacertificate.html#cfn-iot-cacertificate-removeautoregistration', args=[d.arg(name='removeAutoRegistration', type=d.T.bool)]),
  withRemoveAutoRegistration(removeAutoRegistration): { Properties+: { RemoveAutoRegistration: removeAutoRegistration } },
  '#withStatus':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot-cacertificate.html#cfn-iot-cacertificate-status', args=[d.arg(name='status', type=d.T.string)]),
  withStatus(status): { Properties+: { Status: status } },
  '#withTags':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot-cacertificate.html#cfn-iot-cacertificate-tags', args=[d.arg(name='tags', type=d.T.array)]),
  withTags(tags): { Properties+: { Tags: tags } },
  '#withTagsMixin':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot-cacertificate.html#cfn-iot-cacertificate-tags', args=[d.arg(name='tags', type=d.T.array)]),
  withTagsMixin(tags): { Properties+: { Tags+: tags } },
  '#withVerificationCertificatePem':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot-cacertificate.html#cfn-iot-cacertificate-verificationcertificatepem', args=[d.arg(name='verificationCertificatePem', type=d.T.string)]),
  withVerificationCertificatePem(verificationCertificatePem): { Properties+: { VerificationCertificatePem: verificationCertificatePem } },
}
