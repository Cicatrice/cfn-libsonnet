(import '../../../extensions/attributes.libsonnet') + {
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='Listener', url='', help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html'),
  new(errorOnEmptyProp=true): { Type: 'AWS::ElasticLoadBalancingV2::Listener', Properties: { DefaultActions: if errorOnEmptyProp then (error 'You need to define DefaultActions properties for AWS::ElasticLoadBalancingV2::Listener resource') else null, LoadBalancerArn: if errorOnEmptyProp then (error 'You need to define LoadBalancerArn properties for AWS::ElasticLoadBalancingV2::Listener resource') else null } },
  '#new':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html', args=[d.arg(name='errorOnEmptyProp', type=d.T.bool)]),
  '#withAlpnPolicy':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html#cfn-elasticloadbalancingv2-listener-alpnpolicy', args=[d.arg(name='alpnPolicy', type=d.T.array)]),
  withAlpnPolicy(alpnPolicy): { Properties+: { AlpnPolicy: alpnPolicy } },
  '#withAlpnPolicyMixin':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html#cfn-elasticloadbalancingv2-listener-alpnpolicy', args=[d.arg(name='alpnPolicy', type=d.T.array)]),
  withAlpnPolicyMixin(alpnPolicy): { Properties+: { AlpnPolicy+: alpnPolicy } },
  '#withCertificates':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html#cfn-elasticloadbalancingv2-listener-certificates', args=[d.arg(name='certificates', type=d.T.array)]),
  withCertificates(certificates): { Properties+: { Certificates: certificates } },
  '#withCertificatesMixin':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html#cfn-elasticloadbalancingv2-listener-certificates', args=[d.arg(name='certificates', type=d.T.array)]),
  withCertificatesMixin(certificates): { Properties+: { Certificates+: certificates } },
  '#withDefaultActions':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html#cfn-elasticloadbalancingv2-listener-defaultactions', args=[d.arg(name='defaultActions', type=d.T.array)]),
  withDefaultActions(defaultActions): { Properties+: { DefaultActions: defaultActions } },
  '#withDefaultActionsMixin':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html#cfn-elasticloadbalancingv2-listener-defaultactions', args=[d.arg(name='defaultActions', type=d.T.array)]),
  withDefaultActionsMixin(defaultActions): { Properties+: { DefaultActions+: defaultActions } },
  '#withLoadBalancerArn':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html#cfn-elasticloadbalancingv2-listener-loadbalancerarn', args=[d.arg(name='loadBalancerArn', type=d.T.string)]),
  withLoadBalancerArn(loadBalancerArn): { Properties+: { LoadBalancerArn: loadBalancerArn } },
  '#withPort':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html#cfn-elasticloadbalancingv2-listener-port', args=[d.arg(name='port', type=d.T.number)]),
  withPort(port): { Properties+: { Port: port } },
  '#withProtocol':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html#cfn-elasticloadbalancingv2-listener-protocol', args=[d.arg(name='protocol', type=d.T.string)]),
  withProtocol(protocol): { Properties+: { Protocol: protocol } },
  '#withSslPolicy':: d.fn(help='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html#cfn-elasticloadbalancingv2-listener-sslpolicy', args=[d.arg(name='sslPolicy', type=d.T.string)]),
  withSslPolicy(sslPolicy): { Properties+: { SslPolicy: sslPolicy } },
}
